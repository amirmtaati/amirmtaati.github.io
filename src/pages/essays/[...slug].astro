---
import { getCollection, getEntry } from 'astro:content';
import PostLayout from '../../layouts/PostLayout.astro';
import Navigation from '../../components/Navigation.astro';
import Footer from '../../components/Footer.astro';
import Tag from '../../components/Tag.astro';

// Generate static paths for all essays
export async function getStaticPaths() {
  const essays = await getCollection('essays');
  return essays.map(essay => ({
    params: { slug: essay.slug },
  }));
}

// Get the slug from the URL
const { slug } = Astro.params;

// Fetch the essay by slug
const essay = await getEntry('essays', slug!);
if (!essay) {
  return Astro.redirect('/404'); // Redirect to 404 if essay not found
}

// Render the Markdown content
const { Content, headings } = await essay.render();

// Get all essays for "More essays" section
const allEssays = await getCollection('essays');
// Filter out current essay and get 3 random ones
const otherEssays = allEssays
  .filter(e => e.slug !== slug)
  .sort(() => 0.5 - Math.random())
  .slice(0, 2);
---

<PostLayout title={essay.data.title} headings={headings}>
  <!-- Add KaTeX CSS -->
  <link 
    rel="stylesheet" 
    href="https://cdn.jsdelivr.net/npm/katex@0.16.8/dist/katex.min.css" 
    integrity="sha384-GvrOXuhMATgEsSwCs4smul74iXGOixntILdUW9XmUC6+HX0sLNAK3q71HotJqlAn" 
    crossorigin="anonymous"
    slot="head"
  />
  
  <Navigation slot="navigation" />
  
  <article class="prose prose-lg dark:prose-invert max-w-none">
    <header class="mb-16">
      <h1 class="text-6xl font-serif mb-6">{essay.data.title}</h1>
      
      <div class="flex flex-wrap gap-3 items-center mb-10">
        <time class="text-gl-fg2 dark:text-gd-fg2 text-base">
          {new Date(essay.data.date).toLocaleDateString('en-US', {
            year: 'numeric',
            month: 'long',
            day: 'numeric'
          })}
        </time>
        
        <span class="text-gl-fg2 dark:text-gd-fg2 text-base flex items-center gap-2">
          <span class="i-carbon-time text-lg"></span>
          {essay.data.readTime} min read
        </span>
        
        {essay.data.tags && (
          <div class="flex flex-wrap gap-2">
            {essay.data.tags.map((tag) => (
              <Tag name={tag} />
            ))}
          </div>
        )}
      </div>
      
      {essay.data.description && (
        <p class="text-xl italic text-gl-fg2 dark:text-gd-fg2 mb-12 border-l-4 border-gl-accent dark:border-gd-accent pl-4 py-2">
          {essay.data.description}
        </p>
      )}
    </header>
    
    <div class="essay-content mt-12 text-lg leading-relaxed">
      <Content />
    </div>
    
    <!-- Related Essays section -->
    {otherEssays.length > 0 && (
      <div class="mt-24 pt-12 border-t border-gl-border dark:border-gd-border">
        <h2 class="text-3xl font-serif mb-10">More Essays</h2>
        <div class="grid grid-cols-1 gap-8">
          {otherEssays.map(relatedEssay => (
            <div class="p-8 rounded-xl bg-gl-bg2/50 dark:bg-gd-bg2/50 border border-gl-border dark:border-gd-border hover:shadow-md transition-all">
              <a href={`/essays/${relatedEssay.slug}`} class="no-underline text-inherit visited:text-inherit">
                <h3 class="text-2xl mb-3 hover:text-gl-accent dark:hover:text-gd-accent transition-colors">
                  {relatedEssay.data.title}
                </h3>
              </a>
              <p class="text-lg text-gl-fg2 dark:text-gd-fg2 mb-4 line-clamp-2">
                {relatedEssay.data.description}
              </p>
              <div class="flex justify-between items-center">
                <time class="text-base text-gl-fg2 dark:text-gd-fg2">
                  {new Date(relatedEssay.data.date).toLocaleDateString('en-US', {
                    year: 'numeric',
                    month: 'long',
                    day: 'numeric'
                  })}
                </time>
                <span class="text-base text-gl-fg2 dark:text-gd-fg2">
                  {relatedEssay.data.readTime} min read
                </span>
              </div>
            </div>
          ))}
        </div>
      </div>
    )}
  </article>

  <Footer slot="footer" />
</PostLayout>

<style>
  .essay-content {
    /* This ensures the content area takes available space */
    flex: 1;
  }

  .essay-content :global(h2) {
    font-size: 2.25rem;
    margin-top: 3rem;
    margin-bottom: 1.5rem;
  }

  .essay-content :global(h3) {
    font-size: 1.75rem;
    margin-top: 2.5rem;
    margin-bottom: 1.25rem;
  }

  .essay-content :global(p) {
    margin-bottom: 1.5rem;
    line-height: 1.8;
  }

  .essay-content :global(ul), .essay-content :global(ol) {
    margin-top: 1.5rem;
    margin-bottom: 1.5rem;
  }

  .essay-content :global(li) {
    margin-bottom: 0.75rem;
  }

  .essay-content :global(pre) {
    margin: 2rem 0;
    padding: 1.5rem;
    border-radius: 0.5rem;
  }

  .essay-content :global(img) {
    margin: 2rem auto;
    border-radius: 0.5rem;
    max-width: 100%;
    height: auto;
  }

  .essay-content :global(blockquote) {
    margin: 2rem 0;
    padding: 1rem 1.5rem;
    border-left-width: 4px;
    font-style: italic;
  }
</style>